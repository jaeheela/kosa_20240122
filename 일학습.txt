[1~4일차]
01. 4차 산업혁명 정보기술의 이해와 활용
- IT Infrastructure 개요 : 요구사항 분석과 IT 인프라, IT Infra Architecture
- IT Infrastructure 구성 : 하드웨어-네트워크-운영체제-미들웨어
- IT Infrastructure 특징 : 시스템설계(정보시스템구축), 클라우드환경의 시스템설계/구축
- 정보 기술 최신 동향 : 4차산업혁명의특징(인공지능, 빅데이터, 초연결)
   - 빅데이터(서비스구축, 인프라고려사항, 빅데이터 인프라플랫폼)
   - 하둡
   - 인공지능 - 머신러닝(지도학습, 비지도학습, 강화학습) & 딥러닝
   - 데이터분석 및 인공지능개발도구(SAS, R, Python, Excel)
   - 통계기법과 자료의 표현방식(질적자료, 연속자료)
   - 데이터마이닝 기법(분류, 군집화, 연관성, 연속성)

   <머신러닝>
   - 머신러닝 과정(결정경계, 판별함수, 결정규칙)
   - 머신러닝 동작과정 : 학습 - 전처리 - 특징추출 - 학습 - 결정 - 분류/인식 - 인식결과
   - 품질악영향 : 과적합no, 부적합no, 딱 중간ok(일부러 모델품질 훼손)
   - 지도학습(SVM,다층신경망) VS 비지도학습(군집화,K-Means)
   - 신경망모델

   <딥러닝>
   - 딥러닝(CNN, RNN, YOLO, 음성인식, 영상인식, 자연어처리)

   <자연어분석(NLP)>
   
   - 이미지 데이터(특징, 비트맵, 특징공학, 이미지파일의특징)
	- 00 ~ FF(최대빛)
	- R : FF0000
	- G : 00FF00
	- B : 0000FF
   - 동영상 데이터
   - 압축 : MPEG
   - OpenCV, CNN, YOLO

   - 빅데이터/인공지능 품질 지표(데이터), 인공지능 모델평가, IOT, 블록체인
   - 클라우드 컴퓨팅(특징, aws, naver, 클라우드컴퓨팅서비스 구성요소, 엣지 클라우드, 컨테이너기술, 도커)
   - MSA(마이크로 서비스 통합과 배포)


02. 소프트웨어 공학의 이해와 활용
- 소프트웨어 요구사항 : 개요, 중요성, 개발(도출-분석-명세-검증), 관리
- 소프트웨어 개발모형(SDLC: 종류) : 폭포수, 프로토타입, 나선형, 검증형
- 소프트웨어 개발방법론 : 구성요소, 종류/동향, 애자일, XP, TDD, 스크럼, DevOps, CI/CD
- 소프트웨어 : 소프트웨어 아키텍쳐 정의 - 소프트웨어 분석과설계 - 품질 - 테스트 - 배포와 시범운영 - 프로젝트 관리


[4~5일차]
03. 윈도우 운영체제
03-1. 윈도우 운영체제의 특징과 활용
03-2. 윈도우의 구조
03-3. 윈도우 OS의 특징 
: Message Driven(메세지에서 메세지를 꺼내서 실행)
: 커널과 사용자가 분리(사용자 프로그램이 커널(운영체제)로 다이렉트로 들어갈 수 없음)
: 워드와 한글을 동시에 사용할 때 서로는 모르고 내가 4gb 다 쓰고있다 생각함
: 각각의 프로그램은 메세지를 보내 서로 반응(text주세요!) 
: HAL,Plug&Hug
: 선점형멀티태스킹(ctrl+shift+esc)

: fat32(파일시스템-포맷 시, 모든운영체제가능, 4gb이상저장못함)
: ntfs(파일시스템-포맷 시, 윈도우전용, 복원가능, 압축저장가능, 사용자마다 권한 둘 수 있음, 100gb저장가능)
: exFAT(파일시스템-포맷 시, 윈도우 맥 모두 가능) 

: NTFS : ADS (Alternative Data Stream) - 파일의 부가적인 설명을 보통 넣음 : 확인법 - dir /r
cls
cd  
dir , dir /w, dir /r
cd C:\_Temp
echo hello > test.txt 입력을 위한 리다이렉트(= echo)
more < test.txt 출력을 위한 리다이렉트(= cat) >>>> hello 
echo happy > test.tst:msg
more < test.txt >>>> hello 
more < test.txt:msg >>>>happy 
- 윈도우에서 실행 가능한 파일 : exe, batch, script(hack.vbs) 파일

*** test.txt 파일의 ADS 기능 ***
echo happy > test.txt:msg >> 넣기
more < test.txt:msg >> 출력
echo more < hack.vbs > test.txt:hack.vbs >> 넣기
test.txt 더블클릭 >> 실행(그 뒤에는 hack파일 실행중/ 크기와 디스크할당 크기 다름/ dir /r)
more < test.txt:hack.vbs >> 출력
type c:\Windows\System32\calc.exe > test.txt:calc.exe >> 넣기
wmic process call create "c:\_Temp\test.txt:calc.exe" >> 실행

: 암묵상 32 - 64비트
: 64비트 운영체제에서 32비트 지원함 (C:\Program Files (x86) - 32비트지원 / C:\Program Files - 64비트 지원)
: C:\Windows\System32 - 64비트, C:\Windows\SysWOW64 - 32비트
:**프로그램 설치 시 몇비트 지원 프로그램인지 확인 가능**
: UAC(User Account Control) : 관리자 권한이 필요합니다 - 프로그램 설치시 팝업 , 고정식디스크의 수정, program files 폴더 수정,c드라이브의 windows폴더 수정, 중요한 관리 기능할 때
 
03-4. 윈도우 시스템 분석을 위한 도구
03-5. Visual Studio
03-6. 윈도우 응용 프로그램
03-7. 응용 프로그램과 운영체제 관계
03-8. 윈도우 시스템 콜
03-9. PE 포맷의 특징 
: file signatures 검색해서 확장자를 txt파일로 검색했을때 나오는부분(?), windows 실행파일(exe)은 MZ로 시작
03-10. 윈도우 DLL
- 윈도우 서비스(WIN+R : services.msc) : 서비스프로그램은 윈도우 서비스에 맞춘 실행파일이다.
- 윈도우 파일: 종류, 구조 : 파일 업로드 처리 시 : 확장자명 혹은 파일 시그니처로 제어문 다룸
- 윈도우 레지스트리(WIN+R : regedit)
 : \HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run : 프로그램 자동실행 목록
- 윈도우 레지스트리 구조 및 관리정보
- 윈도우 운영체제의 네트워크 관리 
: ipconfig /  ipconfig -all / ipconfig -display dns / ipconfig -flushdns
: arp -a(ip주소-mac주소 담음)
: nslookup naver.com 
>>>이름:     naver.com
 Addresses:  223.130.200.107
	     223.130.200.104
	     223.130.195.95
	     223.130.195.200
=> 로드밸런스로도 부하분산 가능하지만, dns로도 가능하다
: ping google.com (응답 없으면 - 네트워크오류, 구글서버오류, 서버에서응답안하도록설정)
: tracert google.com(google서버까지 거쳐가는 라우터 ip 주소 a->b->c->d..)
: netstat
03-11. 윈도우 운영체제의 시스템 관리 : 환경변수 설정, 자동실행 설정 중심
03-12. 배치파일과 파워 쉘 프로그래밍
03-13. 스크립트 프로그래밍 언어


4. 리눅스 운영체제
- 공유기 다른말로 NAT
- virtual box : 공유기(NAT network) 달아주자!
	-> 공유기1 - (가상머신1CentOS7_team1234.ova)a컴-----------(NAT network)---------- b컴(가상머신2Kali-2019-2-amd64_toor.ova) - 공유기2
	-> 그래서 서로 다른 컴끼리 통신하게끔
- window 운영체제 위 virtualBox [centOS(웹서버) - 공유기1(NAT)]

- systemctl status sshd
● sshd.service - OpenSSH server daemon
   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)
   Active: active (running) since Thu 2024-01-25 19:17:28 EST; 3h 4min ago
     Docs: man:sshd(8)
           man:sshd_config(5)
 Main PID: 1024 (sshd)
   CGroup: /system.slice/sshd.service
           └─1024 /usr/sbin/sshd -D

Jan 25 19:17:28 localhost.localdomain systemd[1]: Starting OpenSSH server daemon...
Jan 25 19:17:28 localhost.localdomain sshd[1024]: Server listening on 0.0.0.0 port 22.
Jan 25 19:17:28 localhost.localdomain systemd[1]: Started OpenSSH server daemon.
Jan 25 19:17:28 localhost.localdomain sshd[1024]: Server listening on :: port 22.
Jan 25 19:39:32 localhost.localdomain sshd[1677]: Accepted password for root from 192.168.56.1 port 58599 ssh2
Jan 25 20:52:51 localhost.localdomain sshd[8555]: Accepted password for master from 192.168.56.1 port 58914 ssh2
Jan 25 21:00:51 localhost.localdomain sshd[8641]: Accepted password for root from 192.168.56.1 port 58926 ssh2

** 1. virtual box 다운
** 2. NAT 네트워크 설정 : NAT network : 10.0.2.0/24
** 3. 가상시스템 설정
- 가상머신 위 돌아가는 운영체제: 레드햇 계열
- 이름: CentOS7_team1234 
- ip: 10.0.2.5 
- 메모리 할당 : 2048MB 
	- 내 내부ip(10.0.2.5:1234)가 외부로 나가려면? 
		- 매핑테이블을 통해 임의로 외부ip(912.168.56.1:4567)에 매핑해야함 
		- 내 외부ip가 다른 외부ip와 통신함 : 내 외부ip (912.168.56.1) =======(통신)======> 다른 외부ip (8.8.8.8)
		- 매핑 테이블
			내부--------------외부
			--------------------------------------
			10.0.2.5:1234      912.168.56.1:4567
			10.0.2.5:22(ssh)   912.168.56.1:22 (포트포워딩 설정)
	- 외부ip가 내 내부ip와 통신하려면?
		- 포트포워딩으로 설정하자
		- 게스트ip : virtualbox 안에서 동작하고 있는 운영체제 CentOS7_team1234.ova (ex. centOS - 10.0.2.5)
		- 호스트ip : 공유기 밖에서 도는 ip (ex. VirtualBox Host-Only Ethernet Adapter - 192.168.56.1)
		- 포트포워딩 설정:
			: 이름 CentOS-SSH
			: 프로토콜 TCP
			: 호스트IP 192.168.56.1
			: 호스트포트 22
			: 게스트IP 10.0.2.5
			: 게스트포트 22
- ipconfig /all
   연결별 DNS 접미사. . . . :
   설명. . . . . . . . . . . . : VirtualBox Host-Only Ethernet Adapter
   물리적 주소 . . . . . . . . : 0A-00-27-00-00-11
   DHCP 사용 . . . . . . . . . : 아니요
   자동 구성 사용. . . . . . . : 예
   링크-로컬 IPv6 주소 . . . . : fe80::6022:b02f:e072:f9af%17(기본 설정)
   IPv4 주소 . . . . . . . . . : 192.168.56.1(기본 설정)
   서브넷 마스크 . . . . . . . : 255.255.255.0
   기본 게이트웨이 . . . . . . :
   DHCPv6 IAID . . . . . . . . : 688521255
   DHCPv6 클라이언트 DUID. . . : 00-01-00-01-26-F4-B8-B5-14-C9-13-FD-DD-07
   DNS 서버. . . . . . . . . . : fec0:0:0:ffff::1%1
                                 fec0:0:0:ffff::2%1
                                 fec0:0:0:ffff::3%1
   Tcpip를 통한 NetBIOS. . . . : 사용

- ssh root@192.168.56.1
- password >> team1234
- [root@localhost /]
- [root@localhost var]

** ssh로 접속할 수 있는 환경 구성하는 것이 좋음 - ssh 접속 시 리눅스로 동작!

- 레드햇 계열 : Cent, Rockey - yum로 설치 (yum install nano) (yum remove nano)
- 데비안계열 : 우분투 - apt/ apt-get로 설치 (apt install nano) (apt remove nano)

[vi 편집기 - 리눅스 내장 편집기/네트워크 없으면 nano 설치 못하니..]

/var : 리눅스의 로그파일과 데이터 파일
/etc : 설정 파일(리눅스 위에서 서버 동작할 수 있도록 하면, /etc에서 확인 가능 ex.아파치웹서버)
실행파일 : 실행권한이 부여된 파일

- test.sh 실행법
  # source test.sh
  # . test.sh
  # bash test.sh
  # chmod +x test.sh 

- 전역변수로 쓰고 싶으면 export 붙임 : export MY_ENV="Hello" >> echo $MY_ENV
- 지역변수 
- PATH ( 환경변수) : 명령어를 찾는 디렉터리 순서
- ~ : 로그인한 사용자의 home 디렉토리
- /root
- /home/master
- /home/svc

- 웹서버를 설치하고 실행하고 싶다. (httpd )
	- 설치:   yum install httpd        (우분투 : apt-get 혹은 apt  install apache2)
	- 실행:   systemctl start httpd (실행)
	           systemctl enable httpd (자동실행)
	           systemctl status httpd (상태)
	- 방화벽설정
 	         firewall-cmd --permanent --add-port=80/tcp
 	         firewall-cmd --reload 




5. 서비스 소프트웨어의 활용

6. 모바일 운영체제의 활용
- ios:
- android: 오픈소스 플랫폼
- windows mobile
- tizen(삼성전자 주도)



7. 네트워크 활용
8. 데이터베이스 활용
9. 개발도구와 플랫폼 활용


[2일차]
10. 프로그래밍 언어 활용
- 컴퓨터가 실행가능한 명령어로 변환되는 방식
  - 컴파일언어 : 소스코드파일이 컴파일 대상 시스템에서 바로 실행될 수 있는 명령어의 집합으로 바뀜
  - 인터프리터 언어 : 인터프리터(동시통역가같은?)라고하는 별도의 프로그램이 소스코드를 해석해서 그때그때 컴퓨터에맞게 실행 - 컴파일과정을 거쳐야 실행하려는 환경에 맞는 기계어 조합이 됨
<C언어>
  - 컴파일언어(컴파일하면 결과물로 CPU가 직접 이해할 수 있는 instruction code를 생성)
  - 포인터, 메모리주소 자체 read/write 가능, 주소 제어 가능하므로 기계(주소..?)에 많이 사용
  - 다른 언어들은 메모리 직접 접근 안됨
  - 실행 : void main 함수 실행
  - Coding, Debugging 쉬움
<자바> 
  - 컴파일 언어인 동시에 인터프리터 언어
  - 메모리주소 자체 read/write 불가능
  - jvm만 탑재된다면 자바로 만든 언어 실행 가능, 재사용
  - 태생이 객체지향프로그래밍언어
  - 실행 : public class 내 public static void main 함수가 회출되며 실행
<Python>
  - 인터프리터언어 
  - 위에서 아래로 실행
  - 다이나믹타이핑(변수타입없음) - 실행 시 판단해서 느림
  - 파이썬은 인터프리터 언어라서 instruction code를 생성하지 못함, 즉 파이썬은 컴파일러가 없음
  <Python TIL>
  - C:\Users\jaehe\AppData\Roaming\Python\Python312\Scripts
  - 범용언어(객체지향, 구조적, ..)
  - https://pypi.org/ - 라이브러리 저장소 검색, pip install ~
  - 아나콘다에 주피터 노트북이 있음
  - 구글코랩 : 아나콘다에 주피터 노트북이 있는 웹버전
  - 튜플 : (), 변경 불가능
  - 리스트 : [], 변경 가능
  - 딕셔너리 : key value
  - Set : 집합, 중복허용 불가능, 순서없음
  - """sdfsdfkjshkdhfkhsf""" '''sdfsdfkjshkdhfkhsf'''' : 문자열로 인식
  - 문자열포맷팅 : 숫자변수 %d% 3, 문자변수 %s% "3", f함수 num=3  f'sdjfkshdkf {num+2}sdfsd'
  - 리턴값이 2개 이상 가능 return a+b, a*b -> 출력시 튜플로 나옴
  - 모듈 : 하나의 파이썬 파일, 사용 시 import문(import calc vs from calc import sum) & 패키지 : 모듈 모음
<js>
  - 인터프리터언어 
  - 위에서 아래로 실행
  - 다이나믹타이핑(변수타입없음) - 실행 시 판단해서 느림
<dart>
  - flutter 프레임워크 이용
  - 하나의 코드로 네이티브 속도나는 앱개발 가능
  - 우분투의 차기버전에 어플리케이션을 꾸미는 기본언어로 탑재됨



