[20240123]

* 윈도우 운영체제에서 리눅스를 사용할 수 있는 방법?

   - VM : VirtualBox (OSS), WMWare, Parallels
   - Cloud에 리눅스 머신 생성하고 원격 접속
   - WSL2 (Windows Subsystem for Linux v2) 
     => Power Shell을 관리자 모드로 실행 후
          ( wsl --install -d Ubuntu)
   - Docker

------------------------------------

ㅇ 정보보안의 기본 이론
  
* 정보보안의 요구사항
   - 기밀성 (암호화, 접근 통제), 무결성 (해시함수), 가용성 (이중화), 법적 준거성.

* 암호화
  - 양방향 암호화 (암호화, 복호화), 단방향 암호화 (암호화, 복호화X)
  - 대표적인 단방향 암호화 기법 : 해시 (해시함수)

<해시함수> : sha-256
  1) 단방향 : 암호화는 할 수 있으나, (수학적 방법으로는) 복호화 할수 없다.
  2) 고정길이 출력 : 입력값의 크기는 가변이나 출력값의 크기(길이)는 고정 
  3) 입력값이 다르면 출력값도 다르다.
  4) 2개의 결과값 (MD, Message Digest, 해시값)이 같으면, 2개의 입력값이 같다.

       12345 % 10  ==>  5
        123     % 10 ==> 3
        345   % 10   ==> 5
   ==> 무결성을 확보하는 데 사용한다

[블록체인]
ㅇ 블록체인 = 블록 + 체인
                    = (Header + Data) + 체인


------------------------------------

* https://hey.technonia.com/
* https://wikidocs.net/ 
KOSA20240122
https://colab.research.google.com/ 
https://pypi.org/ 

------------------------------------

ㅇ 교수님의 숙제
 학점관리 시스템을 개발하고 싶다.
  국어, 수학 의 평균   
  70 점 이상 : A 
  40 점 이상 : B
                    : C
  AI(인공지능)으로 개발.

  String caclGrade(KOR, MATH)
  {
         mean = (KOR + MATH) / 2
         if (70<=mean) return ‘A’
        ..
        ...
  }

1) 학점 데이터를 확보 (2만건)
    ---------------------------------------------
       KOR       MATH            GRADE
    ---------------------------------------------
        90             90                      A
        10             40                       C
      ..
       ..
 2) 데이터 특징 파악, (필요시) 전처리
 3) 학습용 데이터 (15000건) + 검증용 데이터 (5000건)
 4) 파이썬/구글이 준 머신러닝 라이브러리에 입력 (학습데이터)
       ==> Weigh 를 찾아줘.
 5) 검증용 데이터로 정확도(품질) 검증.
       ==> 99.9 % 정확도로 맞추고.
  6) weight 파일을 드리겠습니다. (모델에 탑재하세요)
       ==> SW 개발.
  7) 다음학기 학생의 점수를 입력 (80, 70) ===> ‘A’

....
....
....
 (1) 학습을 위한 데이터를 우리가 직접 만들자.
 (2) 만들어진 데이터의 특징을 살펴보자 (그림)
 (3) SVM (파이썬에서 제공하는 Support Vector Machine)을 이용해 보자.
 (4) 딥러닝으로 학습하자.
 참고사이트 : https://playground.tensorflow.org/ 
